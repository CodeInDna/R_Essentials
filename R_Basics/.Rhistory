horiz = T,  # Draw Horizontal bars,
ylab = "Clarity of Diamonds",
xlab = "Frequency",
xlim = c(0, 15000),  # Limits for x axis
border = NA,  # No borders on bars
col = '#CD0000'  # "red3"
)
# 100% stacked bar
diamonds %>%
select(color, clarity) %>%
plot()
# Stacked bars: step 1: create table
df <- diamonds %>%
select(color,clarity) %>%
table() %>%
print()  # show table in console
# Stacked bars: step 1: create table
df %>%
barplot(
legend = rownames(.))  # Draw plot w/legend
# Side by Side bar
df %>%
barplot(legend = rownames(.), # Dot is placeholder for pipe
beside = T   #Put bars next to each other
)
# Shortest method to make a barplt
plot(diamonds$cut)
diamonds
# Similar process using pipes
diamonds %>%
select(color) %>%
plot()
# Similar code using barplot; doesn't work
diamonds %>%
select(clarity) %>%
barplot()  # Error: 'height' must be a vector or a matrix
# Similar code using barplot; doesn't work
diamonds %>%
select(clarity) %>%
barplot()  # Error: 'height' must be a vector or a matrix
# Try again with table()
diamonds %>%
select(clarity) %>%
table() %>%  # Put data in a appropriate format
barplot()
# Try again with table()
diamonds %>%
select(clarity) %>%
table() %>%  # Put data in a appropriate format
barplot()
# Sort bar by descending values(not for ordinal X)
diamonds %>%
select(clarity) %>%
table() %>%  # Put data in a appropriate format
sort(decreasing = T) %>%  # Sort table
barplot()
# Adding options to plot
diamonds %>%
select(clarity) %>%
table() %>%
barplot(
main = "Clarity of Diamonds",
sub = "(Source: ggplot2::diamonds)",
horiz = T,  # Draw Horizontal bars,
ylab = "Clarity of Diamonds",
xlab = "Frequency",
xlim = c(0, 15000),  # Limits for x axis
border = NA,  # No borders on bars
col = '#CD0000'  # "red3"
)
# 100% stacked bar
diamonds %>%
select(color, clarity) %>%
plot()
# Stacked bars: step 1: create table
df %>%
barplot(legend = rownames(.))  # Draw plot w/legend
# Side by Side bar
df %>%
barplot(legend = rownames(.), # Dot is placeholder for pipe
beside = T   #Put bars next to each other
)
?hist
# Histogram with defaults
hist(diamonds$price)
# Histogram with options
hist(diamonds$price,
breaks = 7,   # Suggest number of breaks
main = "Histogram of Price of Diamonds",
sub = "(Source: ggplot2::diamonds)",
ylab = "Frequency",
xlab = "Price of Diamonds",
col = "red3"
)
# Histogram with defaults
hist(diamonds$price)
boxplot
?boxplot # Get info on Box Plot
# Histogram with defaults
boxplot(diamonds$price)
diamonds   # Display the begining of the dataset
diamonds   # Display the begining of the dataset
# Using the diamonds dataset from ggplot2
?diamonds  # Get info about diamonds dataset
# Using the diamonds dataset from ggplot2
?diamonds  # Get info about diamonds dataset
?diamonds  # Get info about diamonds dataset
?diamonds  # Get info about diamonds dataset
library(ggplot2)
?diamonds  # Get info about diamonds dataset
# Histogram with defaults
boxplot(diamonds$price)
# Similar command using pipelines
diamonds %>%
select(price) %>%
boxplot()
# Similar command using pipelines
diamonds %>%
select(price) %>%
boxplot()
# Similar command using pipelines
diamonds %>%
select(price) %>%
boxplot()
library(markdown)
# Similar command using pipelines
diamonds %>%
select(price) %>%
boxplot()
library(magrittr)
# Similar command using pipelines
diamonds %>%
select(price) %>%
boxplot()
library(selectr)
# Similar command using pipelines
diamonds %>%
select(price) %>%
boxplot()
library(psych)
# Histogram with options
hist(diamonds$price,
breaks = 7,   # Suggest number of breaks
main = "Histogram of Price of Diamonds",
sub = "(Source: ggplot2::diamonds)",
ylab = "Frequency",
xlab = "Price of Diamonds",
col = "red3"
)
# Similar command using pipelines
diamonds %>%
select(price) %>%
boxplot()
library(dplyr)
# Similar command using pipelines
diamonds %>%
select(price) %>%
boxplot()
# Boxplots with options
diamonds %>%
select(price) %>%
boxplot(
horizontal = T,
notch = T,
main = "Boxplot of Price of Diamonds",
sub = "(Source ggplot2::diamonds)",
xlab = "Price of Diamonds",
col = "#CD0000"  # red3
)
# Boxplots with defaults
boxplot(diamonds$price)
# Boxplots by group using plot()
diamonds %>%
select(color, price) %>%
plot()
# Boxplots by group using boxplot()
diamonds %>%
select(color, priceprice) %>%
boxplot(
price ~ color,   # Tilde indicates formula
data = .,        # Dot is a placeholder for pipe
col = "#CD0000"  # red3
)
# Boxplots by group using boxplot()
diamonds %>%
select(color, price) %>%
boxplot(
price ~ color,   # Tilde indicates formula
data = .,        # Dot is a placeholder for pipe
col = "#CD0000"  # red3
)
# Boxplots with options
diamonds %>%
select(price) %>%
boxplot(
horizontal = T,
notch = T,
main = "Boxplot of Price of Diamonds",
sub = "(Source ggplot2::diamonds)",
xlab = "Price of Diamonds",
col = "#CD0000"  # red3
)
# Boxplots by group using boxplot()
diamonds %>%
select(color, price) %>%
boxplot(
price ~ color,   # Tilde indicates formula
data = .,        # Dot is a placeholder for pipe
col = "#CD0000"  # red3
)
# Boxplots by group using boxplot()
diamonds %>%
select(color, price) %>%
boxplot(
#price ~ color,   # Tilde indicates formula
data = .,        # Dot is a placeholder for pipe
col = "#CD0000"  # red3
)
setwd("E:/Yashika/Learning_R/R_Basics")
# LOAD DATA ##########################################
df <- import("Datasets/StateData.xlsx")
library(tidyverse)
# LOAD DATA ##########################################
df <- import("Datasets/StateData.xlsx")
library(pacman)
# LOAD DATA ##########################################
df <- import("Datasets/StateData.xlsx")
getwd()
# LOAD DATA ##########################################
df <- import("/Datasets/StateData.xlsx")
library(rio)
# pacman must already be installed; then load contributed
# packages (including pacman) with pacman
pacman::p_load(pacman, tidyverse)
# LOAD DATA ##########################################
df <- import("/Datasets/StateData.xlsx")
# LOAD DATA ##########################################
df <- import("Datasets/StateData.xlsx")
getwd()
# LOAD DATA ##########################################
df <- import("/Datasets/StateData.xlsx")
# LOAD DATA ##########################################
df <- import("Datasets/StateData.xlsx")
# LOAD DATA ##########################################
df <- import("Datasets/StateData.xlsx") %>%
as_tibble() %>%
select(state_code,
psychRegions,
instagram:modernDance
) %>%
mutate(psychRegions = as.factor(psychRegions)) %>%
print()
# LOAD DATA ##########################################
df <- import("Datasets/StateData.xlsx") %>%
as_tibble() %>%
select(state_code,
psychRegions,
instagram:modernDance
) %>%
mutate(psychRegions = as.factor(psychRegions)) %>%
print()
# LOAD DATA ##########################################
df <- import("Datasets/StateData.xlsx") %>%
as_tibble() %>%
select(state_code,
psychRegions,
instagram:modernDance
) %>%
mutate(psychRegions = as.factor(psychRegions)) %>%
print()
psychRegions
# LOAD DATA ##########################################
df <- import("Datasets/StateData.xlsx") %>%
as_tibble() %>%
select(state_code,
psychRegions,
instagram:modernDance
) %>%
# mutate(psychRegions = as.factor(psychRegions)) %>%
print()
# LOAD DATA ##########################################
df <- import("Datasets/StateData.xlsx") %>%
as_tibble() %>%
select(state_code,
psychRegions,
instagram:modernDance
) %>%
mutate(psychRegions = as.factor(psychRegions)) %>%
print()
df %>%
select(instagram: modernDance) %>%
plot()
df %>%
select(scrapbook:modernDance) %>%
plot()   # Plot all associations
# Bivariate scatterplot with options
df %>%
select(scrapbook:modernDance) %>%
plot(
main = "ScatterPlot of Google Searches by State",
xlab = "Seacher for \"ScrapBook\"",
ylab = "Seacher for \"modern dance\"",
col = "gray",
pch = 20      # Plotting character (small circle)
)
?pch
# Add fit linear regression line (y~x)
df %>%
lm(modernDance ~ scrapbook, data=.) %>%
abline()
# Identify Outlier
df %>%
select(state_code, scrapbook) %>%
filter(scrapbook > 4)  %>%   # filter the outlier
print()
# Bivariate scatterplot witout outlier
df %>%
select(scrapbook:modernDance) %>%
filter(scrapbook < 4) %>%
plot(
main = "ScatterPlot of Google Searches by State",
xlab = "Seacher for \"ScrapBook\"",
ylab = "Seacher for \"modern dance\"",
col = "gray",
pch = 20      # Plotting character (small circle)
)
abline()
lm(modernDance ~ scrapbook, data=.) %>%   # lm =Linear model, ~ = y is a function of x, data=.: grap the data df
abline()  # draw a line
lm(modernDance ~ scrapbook, data=.) %>%   # lm =Linear model, ~ = y is a function of x, data=.: grap the data df
abline()  # draw a line
# Add fit line without outlier
df %>%
filter(scrapbook < 4) %>%
lm(modernDance ~ scrapbook, data=.) %>%   # lm =Linear model, ~ = y is a function of x, data=.: grap the data df
abline()  # draw a line
# Bivariate scatterplot witout outlier
df %>%
select(scrapbook:modernDance) %>%
filter(scrapbook < 4) %>%
plot(
main = "ScatterPlot of Google Searches by State",
xlab = "Seacher for \"ScrapBook\"",
ylab = "Seacher for \"modern dance\"",
col = "gray",
pch = 20      # Plotting character (small circle)
)
# Add fit line without outlier
df %>%
filter(scrapbook < 4) %>%
lm(modernDance ~ scrapbook, data=.) %>%   # lm =Linear model, ~ = y is a function of x, data=.: grap the data df
abline()  # draw a line
# Add fit line without outlier
df %>%
filter(scrapbook < 4) %>%
lm(modernDance ~ scrapbook, data=.) %>%   # lm =Linear model, ~ = y is a function of x, data=.: grap the data df
abline()  # draw a line
# Identify Outlier
df %>%
select(state_code, scrapbook) %>%
filter(scrapbook > 4)  %>%   # filter the outlier
print()
# Add fit line without outlier
df %>%
filter(scrapbook < 4) %>%
lm(modernDance ~ scrapbook, data=.) %>%   # lm =Linear model, ~ = y is a function of x, data=.: grap the data df
abline()  # draw a line
df %>%
select(instagram:modernDance) %>%
plot()   # Plot all associations
# Bivariate scatterplot with defaults
df %>%
select(scrapbook:modernDance) %>%
plot()
# Bivariate scatterplot with options
df %>%
select(scrapbook:modernDance) %>%
plot(
main = "ScatterPlot of Google Searches by State",
xlab = "Seacher for \"ScrapBook\"",
ylab = "Seacher for \"modern dance\"",
col = "gray",
pch = 20      # Plotting character (small circle)
)
# Add fit linear regression line (y~x)
df %>%
lm(modernDance ~ scrapbook, data=.) %>%   # lm =Linear model, ~ = y is a function of x, data=.: grap the data df
abline()  # draw a line
# Bivariate scatterplot with options
df %>%
select(scrapbook:modernDance) %>%
plot(
main = "ScatterPlot of Google Searches by State",
xlab = "Seacher for \"ScrapBook\"",
ylab = "Seacher for \"modern dance\"",
col = "gray",
pch = 50      # Plotting character (small circle)
)
# Bivariate scatterplot with options
df %>%
select(scrapbook:modernDance) %>%
plot(
main = "ScatterPlot of Google Searches by State",
xlab = "Seacher for \"ScrapBook\"",
ylab = "Seacher for \"modern dance\"",
col = "gray",
pch = 50      # Plotting character (small circle)
)
# Add fit linear regression line (y~x)
df %>%
lm(modernDance ~ scrapbook, data=.) %>%   # lm =Linear model, ~ = y is a function of x, data=.: grap the data df
abline()  # draw a line
# Bivariate scatterplot with options
df %>%
select(scrapbook:modernDance) %>%
plot(
main = "ScatterPlot of Google Searches by State",
xlab = "Seacher for \"ScrapBook\"",
ylab = "Seacher for \"modern dance\"",
col = "gray",
pch = 40      # Plotting character (small circle)
)
# Bivariate scatterplot with options
df %>%
select(scrapbook:modernDance) %>%
plot(
main = "ScatterPlot of Google Searches by State",
xlab = "Seacher for \"ScrapBook\"",
ylab = "Seacher for \"modern dance\"",
col = "gray",
# pch = 20      # Plotting character (small circle)
)
# Add fit linear regression line (y~x)
df %>%
lm(modernDance ~ scrapbook, data=.) %>%   # lm =Linear model, ~ = y is a function of x, data=.: grap the data df
abline()  # draw a line
# Bivariate scatterplot with options
df %>%
select(scrapbook:modernDance) %>%
plot(
main = "ScatterPlot of Google Searches by State",
xlab = "Seacher for \"ScrapBook\"",
ylab = "Seacher for \"modern dance\"",
col = "red",
pch = 20      # Plotting character (small circle)
)
# Add fit linear regression line (y~x)
df %>%
lm(modernDance ~ scrapbook, data=.) %>%   # lm =Linear model, ~ = y is a function of x, data=.: grap the data df
abline()  # draw a line
# Identify Outlier
df %>%
select(state_code, scrapbook) %>%
filter(scrapbook > 4)  %>%   # filter the outlier
print()
# Bivariate scatterplot witout outlier
df %>%
select(scrapbook:modernDance) %>%
filter(scrapbook < 4) %>%
plot(
main = "ScatterPlot of Google Searches by State",
xlab = "Seacher for \"ScrapBook\"",
ylab = "Seacher for \"modern dance\"",
col = "gray",
pch = 20      # Plotting character (small circle)
)
# Bivariate scatterplot witout outlier
df %>%
select(scrapbook:modernDance) %>%
filter(scrapbook < 4) %>%
plot(
main = "ScatterPlot of Google Searches by State",
xlab = "Seacher for \"ScrapBook\"",
ylab = "Seacher for \"modern dance\"",
col = "red",
pch = 20      # Plotting character (small circle)
)
# Add fit line without outlier
df %>%
filter(scrapbook < 4) %>%
lm(modernDance ~ scrapbook, data=.) %>%   # lm =Linear model, ~ = y is a function of x, data=.: grap the data df
abline()  # draw a line
# Add fit line without outlier
df %>%
filter(scrapbook < 4) %>%
lm(modernDance ~ scrapbook, data=.) %>%   # lm =Linear model, ~ = y is a function of x, data=.: grap the data df
abline()  # draw a line
# Add fit line without outlier
df %>%
filter(scrapbook < 4) %>%
lm(modernDance ~ scrapbook, data=.) %>%   # lm =Linear model, ~ = y is a function of x, data=.: grap the data df
abline()  # draw a line
# Add fit line without outlier
df %>%
filter(scrapbook < 4) %>%
lm(modernDance ~ scrapbook, data=.) %>%   # lm =Linear model, ~ = y is a function of x, data=.: grap the data df
abline()  # draw a line
# Add fit line without outlier
df %>%
filter(scrapbook < 4) %>%
lm(modernDance ~ scrapbook, data=.) %>%   # lm =Linear model, ~ = y is a function of x, data=.: grap the data df
abline()  # draw a line
# Add fit line without outlier
df %>%
filter(scrapbook < 4) %>%
lm(modernDance ~ scrapbook, data=.) %>%   # lm =Linear model, ~ = y is a function of x, data=.: grap the data df
abline()  # draw a line
# Add fit line without outlier
df %>%
filter(scrapbook < 4) %>%
lm(modernDance ~ scrapbook, data=.) %>%   # lm =Linear model, ~ = y is a function of x, data=.: grap the data df
abline()
